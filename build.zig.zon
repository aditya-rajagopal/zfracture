.{
    .name = "fracture",
    // This is a [Semantic Version](https://semver.org/).
    // In a future version of Zig it will be used for package deduplication.
    .version = "0.0.1",

    // This field is optional.
    // This is currently advisory only; Zig does not yet do anything
    // with this value.
    .minimum_zig_version = "0.13.0",

    // This field is optional.
    // Each dependency must either provide a `url` and `hash`, or a `path`.
    // `zig build --fetch` can be used to fetch all dependencies of a package, recursively.
    // Once all dependencies are fetched, `zig build` no longer requires
    // internet connectivity.
    .dependencies = .{
        .vulkan = .{
            .url = "https://github.com/Snektron/vulkan-zig/archive/06dae6c.tar.gz",
            .hash = "1220edeb3fc7dfc40e6fde705a108edce0a3cc76d165a7c9919d1fb037eccec43372",
        },
        .vulkan_headers = .{
            .url = "https://github.com/KhronosGroup/Vulkan-Headers/archive/v1.3.283.tar.gz",
            .hash = "1220a7e73d72a0d56bc2a65f9d8999a7c019e42260a0744c408d1cded111bc205e10",
        },
        .shader_compiler = .{
            .url = "https://github.com/Games-by-Mason/shader_compiler/archive/2e3c5cf.tar.gz",
            .hash = "1220f6e3b0a122a83c858df141a12c0e8f4e4c981cd6461cb4c3d7e0af9ed691f309",
        },
    },
    .paths = .{
        // This makes *all* files, recursively, included in this package. It is generally
        // better to explicitly list the files and directories instead, to insure that
        // fetching from tarballs, file system paths, and version control all result
        // in the same contents hash.
        "build.zig",
        "build.zig.zon",
        "src",
        "testbed",
        "LICENSE",
        "README.md",
    },
}
